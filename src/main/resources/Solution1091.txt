import java.util.LinkedList;
import java.util.Queue;

// 1091. Shortest Path in Binary Matrix
class Solution {
    public int shortestPathBinaryMatrix(int[][] grid) {
        int n = grid.length;
        if (grid[0][0] == 1) {
            return -1;
        } else if (grid[n - 1][n - 1] == 1) {
            return -1;
        }
        boolean[][] visited = new boolean[n][n];
        visited[0][0] = true;
        Queue<int[]> queue = new LinkedList<>();
        queue.offer(new int[]{0, 0});
        int ans = 1;
        while (!queue.isEmpty()) {
            int queueSize = queue.size();
            for (int e = 0; e < queueSize; ++e) {
                int[] front = queue.poll();
                if (front[0] == n - 1 && front[1] == n - 1) {
                    return ans;
                }
                for (int i = -1; i < 2; ++i) {
                    for (int j = -1; j < 2; ++j) {
                        int nx = front[0] + i;
                        int ny = front[1] + j;
                        if (nx >= 0 && nx < n && ny >= 0 && ny < n && !visited[nx][ny] && grid[nx][ny] == 0) {
                            visited[nx][ny] = true;
                            queue.add(new int[]{nx, ny});
                        }
                    }
                }
            }
            ++ans;
        }
        return -1;
    }
}
