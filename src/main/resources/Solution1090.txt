import java.util.*;

// 1090. Largest Values From Labels
class Solution {
    public int largestValsFromLabels(int[] values, int[] labels, int numWanted, int useLimit) {
        int n = values.length;
        PriorityQueue<Couple> pq = new PriorityQueue<>((c1, c2) -> (c2.value - c1.value));
        for (int i = 0; i < n; ++i) {
            pq.offer(new Couple(values[i], labels[i]));
        }
        HashMap<Integer, Integer> hashMap = new HashMap<>();
        int ans = 0;
        int subsetSize = 0;
        while (!pq.isEmpty() && subsetSize < numWanted) {
            Couple top = pq.poll();
            if (!hashMap.containsKey(top.label) || hashMap.get(top.label) < useLimit) {
                hashMap.put(top.label, hashMap.getOrDefault(top.label, 0) + 1);
                ans += top.value;
                ++subsetSize;
            }
        }
        return ans;
    }
}

class Couple {
    int value;
    int label;

    public Couple(int value, int label) {
        this.value = value;
        this.label = label;
    }
}
