import java.util.ArrayList;
import java.util.LinkedList;
import java.util.List;
import java.util.Queue;

// 0655. Print Binary Tree
class Solution {
    public List<List<String>> printTree(TreeNode root) {
        List<List<String>> values = new ArrayList<>();
        Queue<TreeNode> queue = new LinkedList<>();
        queue.offer(root);
        boolean hasNextLevel = true;
        int bigBlank = 0;
        while (hasNextLevel) {
            bigBlank = bigBlank * 2 + 1;
            hasNextLevel = false;
            int queueSize = queue.size();
            List<String> rowOfValues = new ArrayList<>();
            for (int i = 0; i < queueSize; ++i) {
                TreeNode front = queue.poll();
                if (front == null) {
                    rowOfValues.add("");
                    queue.offer(null);
                    queue.offer(null);
                } else {
                    rowOfValues.add(String.valueOf(front.val));
                    queue.offer(front.left);
                    queue.offer(front.right);
                    if (front.left != null || front.right != null) hasNextLevel = true;
                }
            }
            values.add(rowOfValues);
        }
        int smallBlank = (bigBlank - 1) / 2;
        List<List<String>> ans = new ArrayList<>();
        for (int i = 0; i < values.size(); ++i) {
            List<String> rowOfValues = values.get(i);
            List<String> rowOfAns = new ArrayList<>();
            for (int j = 0; j < smallBlank; ++j) rowOfAns.add("");
            for (int j = 0; j < rowOfValues.size() - 1; ++j) {
                rowOfAns.add(rowOfValues.get(j));
                for (int k = 0; k < bigBlank; ++k) rowOfAns.add("");
            }
            rowOfAns.add(rowOfValues.get(rowOfValues.size() - 1));
            for (int j = 0; j < smallBlank; ++j) rowOfAns.add("");
            bigBlank = smallBlank;
            smallBlank = (smallBlank - 1) / 2;
            ans.add(rowOfAns);
        }
        return ans;
    }
}
