import java.util.HashSet;
import java.util.Set;

// 1016. Binary String With Substrings Representing 1 To N
class Solution {
    public boolean queryString(String s, int n) {
        if (n == 1) {
            return s.contains("1");
        }
        int powerByTwo = 1;
        while (powerByTwo * 2 <= n) {
            powerByTwo *= 2;
        }
        if (powerByTwo > 2048) {
            return false;
        }
        return check(s, powerByTwo / 2, powerByTwo - 1) && check(s, powerByTwo, n);
    }

    private boolean check(String s, int left, int right) {
        int len = s.length();
        int binaryLength = getBinaryLength(left);
        Set<Integer> set = new HashSet<>();
        for (int i = 0; i + binaryLength <= len; ++i) {
            String substring = s.substring(i, i + binaryLength);
            int decimal = Integer.parseInt(substring, 2);
            if (decimal >= left && decimal <= right) {
                set.add(decimal);
            }
        }
        return set.size() == right - left + 1;
    }

    private int getBinaryLength(int n) {
        return (int) (Math.log(n) / Math.log(2)) + 1;
    }
}
