import java.util.Arrays;

// 1235. Maximum Profit in Job Scheduling
class Solution {
    public int jobScheduling(int[] startTime, int[] endTime, int[] profit) {
        int n = startTime.length;
        int[][] jobs = new int[n + 1][];
        jobs[0] = new int[]{0, 0, 0};
        for (int i = 0; i < n; ++i) {
            jobs[i + 1] = new int[]{startTime[i], endTime[i], profit[i]};
        }
        Arrays.sort(jobs, (j1, j2) -> j1[1] - j2[1]);
        int[] dp = new int[n + 1];
        for (int i = 1; i <= n; ++i) {
            int j = binarySearch(i, jobs[i][0], jobs);
            dp[i] = Math.max(dp[i - 1], dp[j] + jobs[i][2]);
        }
        return dp[n];
    }

    int binarySearch(int rightest, int latestEndTime, int[][] jobs) {
        int left = 0;
        int right = rightest;
        while (left < right) {
            int mid = left + (right - left) / 2;
            if (jobs[mid][1] <= latestEndTime) {
                left = mid + 1;
            } else {
                right = mid;
            }
        }
        return left - 1;
    }
}
