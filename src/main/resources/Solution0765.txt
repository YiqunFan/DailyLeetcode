import java.util.HashSet;

// 0765. Couples Holding Hands
class Solution {
    public int minSwapsCouples(int[] row) {
        int len = row.length;
        int pairs = row.length / 2;
        UnionFind unionFind = new UnionFind(pairs);
        for (int i = 0; i < len; i += 2) {
            unionFind.union(row[i] / 2, row[i + 1] / 2);
        }
        return pairs - unionFind.countBlocks();
    }
}

class UnionFind {
    int[] parents;

    public UnionFind(int n) {
        parents = new int[n];
        for (int i = 0; i < n; ++i) {
            parents[i] = i;
        }
    }

    int find(int son) {
        if (parents[son] == son) {
            return son;
        }
        parents[son] = find(parents[son]);
        return parents[son];
    }

    void union(int a, int b) {
        int parentOfA = find(a);
        int parentOfB = find(b);
        if (parentOfA != parentOfB) {
            parents[parentOfA] = parentOfB;
        }
    }

    int countBlocks() {
        HashSet<Integer> set = new HashSet<>();
        for (int parent : parents) {
            set.add(find(parent));
        }
        return set.size();
    }
}
