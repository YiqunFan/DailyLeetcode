// 0421. Maximum XOR of Two Numbers in an Array
class Solution {
    public int findMaximumXOR(int[] nums) {
        int ans = 0;
        Trie root = new Trie();
        for (int num : nums) {
            root.offer(num);
            ans = Math.max(ans, root.match(num));
        }
        return ans;
    }
}

class Trie {
    Trie left = null;
    Trie right = null;

    void offer(int num) {
        Trie node = this;
        for (int k = 30; k >= 0; --k) {
            int bit = (num >> k) & 1;
            if (bit == 0) {
                if (node.left == null) {
                    node.left = new Trie();
                }
                node = node.left;
            } else {
                if (node.right == null) {
                    node.right = new Trie();
                }
                node = node.right;
            }
        }
    }

    int match(int num) {
        Trie node = this;
        int twoSum = 0;
        for (int k = 30; k >= 0; --k) {
            int bit = (num >> k) & 1;
            if (bit == 0) {
                if (node.right != null) {
                    node = node.right;
                    twoSum = (twoSum << 1) + 1;
                } else {
                    node = node.left;
                    twoSum <<= 1;
                }
            } else {
                if (node.left != null) {
                    node = node.left;
                    twoSum = (twoSum << 1) + 1;
                } else {
                    node = node.right;
                    twoSum <<= 1;
                }
            }
        }
        return twoSum;
    }
}
