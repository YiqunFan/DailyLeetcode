import java.util.ArrayList;
import java.util.Comparator;
import java.util.List;

// 0296. Best Meeting Point
class Solution {
    public int minTotalDistance(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        List<Integer> homeXs = new ArrayList<>();
        List<Integer> homeYs = new ArrayList<>();
        for (int i = 0; i < m; ++i) {
            for (int j = 0; j < n; ++j) {
                if (grid[i][j] == 1) {
                    homeXs.add(i);
                    homeYs.add(j);
                }
            }
        }
        homeYs.sort(Comparator.naturalOrder());
        int quantity = homeXs.size();
        int bestX = homeXs.get(quantity / 2);
        int bestY = homeYs.get(quantity / 2);
        if (quantity % 2 == 0) {
            bestX = (homeXs.get(quantity / 2) + homeXs.get(quantity / 2 - 1)) / 2;
            bestY = (homeYs.get(quantity / 2) + homeYs.get(quantity / 2 - 1)) / 2;
        }
        int ans = 0;
        for (int x : homeXs) {
            ans += Math.abs(bestX - x);
        }
        for (int y : homeYs) {
            ans += Math.abs(bestY - y);
        }
        return ans;
    }
}
