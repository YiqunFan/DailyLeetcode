// 0351. Android Unlock Patterns
class Solution {
    public int numberOfPatterns(int m, int n) {
        int[][] via = new int[10][10];
        via[1][3] = via[3][1] = 2;
        via[1][7] = via[7][1] = 4;
        via[1][9] = via[9][1] = 5;
        via[2][8] = via[8][2] = 5;
        via[3][7] = via[7][3] = 5;
        via[3][9] = via[9][3] = 6;
        via[4][6] = via[6][4] = 5;
        via[7][9] = via[9][7] = 8;
        boolean[] visited = new boolean[10];
        int ans = 0;
        ans += 4 * dfs(1, 1, m, n, via, visited);
        ans += 4 * dfs(2, 1, m, n, via, visited);
        ans += dfs(5, 1, m, n, via, visited);
        return ans;
    }

    int dfs(int position, int steps, int atLeast, int atMost, int[][] via, boolean[] visited) {
        if (steps > atMost) return 0;
        int ret = 0;
        if (steps >= atLeast) ret = 1;
        visited[position] = true;
        for (int i = 1; i < 10; ++i) {
            if (!visited[i] && (via[position][i] == 0 || visited[via[position][i]])) {
                ret += dfs(i, steps + 1, atLeast, atMost, via, visited);
            }
        }
        visited[position] = false;
        return ret;
    }
}
