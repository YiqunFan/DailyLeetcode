// 0840. Magic Squares In Grid
class Solution {
    public int numMagicSquaresInside(int[][] grid) {
        int m = grid.length;
        int n = grid[0].length;
        int ans = 0;
        for (int i = 0; i + 2 < m; ++i) {
            for (int j = 0; j + 2 < n; ++j) {
                if (isMagicSquare(grid, i, j)) {
                    ++ans;
                }
            }
        }
        return ans;
    }

    private boolean isMagicSquare(int[][] grid, int i, int j) {
        if (grid[i + 1][j + 1] != 5) return false;
        boolean[] allDigits = new boolean[10];
        for (int k = i; k < i + 3; ++k) {
            for (int l = j; l < j + 3; ++l) {
                if (grid[k][l] > 9 || grid[k][l] == 0 || allDigits[grid[k][l]]) {
                    return false;
                }
                allDigits[grid[k][l]] = true;
            }
        }
        int standard = grid[i][j] + grid[i + 1][j] + grid[i + 2][j];
        if (grid[i][j + 1] + grid[i + 1][j + 1] + grid[i + 2][j + 1] != standard) return false;
        if (grid[i][j + 2] + grid[i + 1][j + 2] + grid[i + 2][j + 2] != standard) return false;
        if (grid[i][j] + grid[i][j + 1] + grid[i][j + 2] != standard) return false;
        if (grid[i + 1][j] + grid[i + 1][j + 1] + grid[i + 1][j + 2] != standard) return false;
        if (grid[i + 2][j] + grid[i + 2][j + 1] + grid[i + 2][j + 2] != standard) return false;
        if (grid[i][j] + grid[i + 1][j + 1] + grid[i + 2][j + 2] != standard) return false;
        return grid[i + 2][j] + grid[i + 1][j + 1] + grid[i][j + 2] == standard;
    }
}
