// 0689. Maximum Sum of 3 Non-Overlapping Subarrays
class Solution {
    public int[] maxSumOfThreeSubarrays(int[] nums, int k) {
        int len = nums.length;
        int[] prefixSum = new int[len + 1];
        for (int i = 0; i < len; ++i) {
            prefixSum[i + 1] = prefixSum[i] + nums[i];
        }
        int[][] maxSum = new int[4][len];
        for (int i = 1; i < 4; ++i) {
            maxSum[i][0] = prefixSum[k];
            for (int j = 1; j < len; ++j) {
                if (j < k) {
                    maxSum[i][j] = Math.max(maxSum[i][j - 1], prefixSum[j + k] - prefixSum[j]);
                } else if (j + k > len) {
                    maxSum[i][j] = maxSum[i][j - 1];
                } else {
                    maxSum[i][j] = Math.max(maxSum[i][j - 1], maxSum[i - 1][j - k] + prefixSum[j + k] - prefixSum[j]);
                }
            }
        }
        int[] ans = new int[3];
        int i = 3;
        int j = len - 1;
        while (i > 0) {
            while (j - 1 >= 0 && maxSum[i][j] == maxSum[i][j - 1]) {
                --j;
            }
            --i;
            ans[i] = j;
            j -= k;
        }
        return ans;
    }
}
