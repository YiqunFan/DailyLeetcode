import java.util.LinkedList;
import java.util.Queue;

// 0662. Maximum Width of Binary Tree
class Solution {
    public int widthOfBinaryTree(TreeNode root) {
        Queue<Pair> queue = new LinkedList<>();
        queue.offer(new Pair(root, 0L));
        long maxWidth = 1L;
        while (!queue.isEmpty()) {
            int queueSize = queue.size();
            long left = 0L;
            long right = 0L;
            for (int i = 0; i < queueSize; ++i) {
                Pair pair = queue.poll();
                TreeNode node = pair.node;
                long index = pair.index;
                if (i == 0) left = index;
                right = index;
                if (node.left != null) {
                    queue.offer(new Pair(node.left, (index << 1) + 1));
                }
                if (node.right != null) {
                    queue.offer(new Pair(node.right, (index << 1) + 2));
                }
            }
            if (right - left + 1 > maxWidth) {
                maxWidth = right - left + 1;
            }
        }
        return (int) maxWidth;
    }
}

class Pair {
    TreeNode node;
    long index;

    public Pair(TreeNode node, Long index) {
        this.node = node;
        this.index = index;
    }
}
