// 1806. Minimum Number of Operations to Reinitialize a Permutation
class Solution {
    public int reinitializePermutation(int n) {
        int[] perm = new int[n];
        for (int i = 0; i < n; ++i) {
            perm[i] = i;
        }
        int ans = 0;
        while (true) {
            ++ans;
            int[] arr = new int[n];
            for (int i = 0; i < n; ++i) {
                if ((i & 1) == 0) {
                    arr[i] = perm[i >> 1];
                } else {
                    arr[i] = perm[(n >> 1) + (i - 1 >> 1)];
                }
            }
            if (isReinitialized(n, arr)) {
                break;
            }
            perm = arr;
        }
        return ans;
    }

    private boolean isReinitialized(int n, int[] arr) {
        for (int i = 0; i < n; ++i) {
            if (arr[i] != i) {
                return false;
            }
        }
        return true;
    }
}
