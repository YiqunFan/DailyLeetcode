import java.util.*;

// 1376. Time Needed to Inform All Employees
class Solution {
    public int numOfMinutes(int n, int headID, int[] manager, int[] informTime) {
        Map<Integer, List<Integer>> fromToMap = new HashMap<>();
        for (int i = 0; i < n; ++i) {
            fromToMap.putIfAbsent(manager[i], new ArrayList<>());
            fromToMap.get(manager[i]).add(i);
        }
        Queue<Node> queue = new LinkedList<>();
        queue.offer(new Node(headID, 0));
        int ans = 0;
        while (!queue.isEmpty()) {
            Node front = queue.poll();
            if (fromToMap.containsKey(front.id)) {
                List<Integer> children = fromToMap.get(front.id);
                for (Integer child : children) {
                    queue.offer(new Node(child, front.time + informTime[front.id]));
                }
            } else {
                ans = Math.max(ans, front.time);
            }
        }
        return ans;
    }
}

class Node {
    int id;
    int time;

    public Node(int id, int time) {
        this.id = id;
        this.time = time;
    }
}
