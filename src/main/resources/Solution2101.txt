import java.util.HashSet;
import java.util.Set;

class Solution {
    public int maximumDetonation(int[][] bombs) {
        int len = bombs.length;
        boolean[][] canDetonate = new boolean[len][len];
        for (int i = 0; i < len; ++i) {
            for (int j = 0; j < len; ++j) {
                long d1Square = (long) (bombs[i][0] - bombs[j][0]) * (bombs[i][0] - bombs[j][0]);
                long d2Square = (long) (bombs[i][1] - bombs[j][1]) * (bombs[i][1] - bombs[j][1]);
                long rSquare = (long) bombs[i][2] * bombs[i][2];
                if (d1Square + d2Square <= rSquare) {
                    canDetonate[i][j] = true;
                }
            }
        }
        int ans = 1;
        for (int i = 0; i < len; ++i) {
            Set<Integer> exploded = new HashSet<>();
            int detonateI = dfs(i, len, canDetonate, exploded);
            if (detonateI > ans) ans = detonateI;
        }
        return ans;
    }

    int dfs(int start, int len, boolean[][] canDetonate, Set<Integer> exploded) {
        int ret = 0;
        for (int j = 0; j < len; ++j) {
            if (canDetonate[start][j] && !exploded.contains(j)) {
                ++ret;
                exploded.add(j);
                ret += dfs(j, len, canDetonate, exploded);
            }
        }
        return ret;
    }
}
