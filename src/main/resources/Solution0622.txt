// 0622. Design Circular Queue
class MyCircularQueue {

    private final int[] nums;
    private int size;
    private final int capacity;
    private int front;
    private int rear;

    public MyCircularQueue(int k) {
        nums = new int[k];
        size = 0;
        capacity = k;
        front = 0;
        rear = 0;
    }

    public boolean enQueue(int value) {
        if (size == capacity) return false;
        nums[rear] = value;
        ++size;
        rear = (rear + 1) % capacity;
        return true;
    }

    public boolean deQueue() {
        if (size == 0) return false;
        --size;
        front = (front + 1) % capacity;
        return true;
    }

    public int Front() {
        if (size == 0) return -1;
        return nums[front];
    }

    public int Rear() {
        if (size == 0) return -1;
        return nums[(rear + capacity - 1) % capacity];
    }

    public boolean isEmpty() {
        return size == 0;
    }

    public boolean isFull() {
        return size == capacity;
    }
}
