import java.util.ArrayList;
import java.util.List;

// 2316. Count Unreachable Pairs of Nodes in an Undirected Graph
class Solution {
    List<List<Integer>> reach = new ArrayList<>();

    public long countPairs(int n, int[][] edges) {
        for (int i = 0; i < n; ++i)
            reach.add(new ArrayList<>());
        for (int[] edge : edges) {
            reach.get(edge[0]).add(edge[1]);
            reach.get(edge[1]).add(edge[0]);
        }
        long sum = ((long) n * (n - 1)) / 2;
        boolean[] visited = new boolean[n];
        for (int i = 0; i < n; ++i) {
            if (!visited[i]) {
                int cnt = dfs(i, visited, new int[1]);
                sum -= ((long) cnt * (cnt - 1)) / 2;
            }
        }
        return sum;
    }

    private int dfs(int node, boolean[] visited, int[] count) {
        if (visited[node]) return count[0];
        visited[node] = true;
        ++count[0];
        for (int curr : reach.get(node)) {
            dfs(curr, visited, count);
        }
        return count[0];
    }
}
